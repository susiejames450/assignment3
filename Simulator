import java.util.Random;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.awt.Color;

/**
 * A simple predator-prey simulator, based on a rectangular field
 * containing wildebeasts and liones.
 * 
 * @author David J. Barnes, Michael KÃ¶lling, Simmi Debnath and Susie James
 * @version 2016.02.29 (2)
 */
public class Simulator
{
    // Constants representing configuration information for the simulation.
    // The default width for the grid.
    private static final int DEFAULT_WIDTH = 120;
    // The default depth of the grid.
    private static final int DEFAULT_DEPTH = 80;
    // The probability that a lion will be created in any given grid position.
    private static final double lion_CREATION_PROBABILITY = 0.08;
    // The probability that a wildebeast will be created in any given grid position.
    private static double wildebeast_CREATION_PROBABILITY = 0.06; 
    // the probability that a mouse will be created 
    private static final double mouse_CREATION_PROBABILITY = 0.4;
    // the probability that berries will be created 
    private static final double berry_CREATION_PROBABILITY = 0.09;
    //the probability that an owl will be created
    private static final double owl_CREATION_PROBABILITY = 0.06;
    // the probability that a hawk will be created
    private static final double hawk_CREATION_PROBABILITY = 0.06;
    
    // List of animals in the field.
    private List<Animal> animals;
    // The current state of the field.
    private List<Plant> plants;
    // list of plants in the field
    private Field field;
    // The current step of the simulation.
    private int step;
    // A graphical view of the simulation.
    private SimulatorView view;
    //Weather system.
    private Weather weather;
    //Implementation of diseases for animals
    private Disease disease;
    
    //Colours for animals
    private Color lightPurple= new Color(219,171,255);
    private Color darkPurple = new Color(75,0,130);
    private Color lightBlue = new Color(51,238,255);
    private Color darkBlue = new Color(0,0,204);
    private Color green = new Color (24,141,48);
    private Color lightYellow = new Color(255,255,153);
    private Color darkYellow = new Color (255,255,0);
    private Color lightGrey = new Color (224,224,224);
    private Color darkGrey = new Color (96,96,96);
    private Color lightBrown = new Color(205,133,63);
    private Color darkBrown = new Color(139,69,19);
    private Color pink = new Color(204,0,102);
    private Color white = new Color(255, 255, 255);
    
    private int time;
    private boolean is12hour;
    private String currentSeason;
    private String currentWeather;
    private double grassProbability;
    private double berryProbability;
    //private static final double wildebeastDeathProbability = 0.1;
    
    private ArrayList<Class> allAnimals;
    
    /**
     * Construct a simulation field with default size.
     */
    public Simulator()
    {
        this(DEFAULT_DEPTH, DEFAULT_WIDTH);
    }
    
    /**
     * Create a simulation field with the given size.
     * @param depth Depth of the field. Must be greater than zero.
     * @param width Width of the field. Must be greater than zero.
     */
    public Simulator(int depth, int width)
    {
        if(width <= 0 || depth <= 0) {
            System.out.println("The dimensions must be greater than zero.");
            System.out.println("Using default values.");
            depth = DEFAULT_DEPTH;
            width = DEFAULT_WIDTH;
        }
  
        // create lists to store all the animals and plants in the simulation
        animals = new ArrayList<>();
        plants = new ArrayList<>();
        allAnimals = new ArrayList<>();
        field = new Field(depth, width);
        weather = new Weather();
        disease = new Disease();

        // Create a view of the state of each location in the field.
        view = new SimulatorView(depth, width);
        view.setColor(Wildebeast.class, lightBrown);
        view.setColor(Lion.class, darkYellow);
        view.setColor(Mouse.class, darkGrey);
        view.setColor(Berries.class, pink);
        view.setColor(Grass.class, green);
        view.setColor(Owl.class, lightBlue);
        view.setColor(Hawk.class, lightPurple);
        
        is12hour = true;
        time = 0;
        currentSeason = "Spring " + "    Weather: rain and sun";
        grassProbability = 0.05;
        berryProbability = 0.05;
        
        Location location = new Location(2, 2);
        Lion lion = new Lion(true, field, location);
        Mouse mouse = new Mouse(true, field, location);
        Owl owl = new Owl(true, field, location);
        Wildebeast wildebeast = new Wildebeast(true, field, location);
        Hawk hawk = new Hawk(true, field, location);
        
        
        // Setup a valid starting point.
        reset();
    }
    
    /**
     * Run the simulation from its current state for a reasonably long period,
     * (4000 steps).
     */
    public void runLongSimulation()
    {
        simulate(100);
    }
    
    /**
     * Run the simulation from its current state for the given number of steps.
     * Stop before the given number of steps if it ceases to be viable.
     * @param numSteps The number of steps to run for.
     */
    public void simulate(int numSteps)
    {
        for(int step = 1; step <= numSteps && view.isViable(field); step++) {
            simulateOneStep();
            //delay(500);   // uncomment this to run more slowly
        }
    }
    
    /**
     * Run the simulation from its current state for a single step.
     * Iterate over the whole field updating the state of each
     * lion and wildebeast.
     */
    public void simulateOneStep()
    {
        step++;
        is12hour = !is12hour;
        currentSeason = view.getTheSeason();
        currentWeather = view.getWeather();
        // method here that handles the weather 
       
        view.updateDayTime();
        spawnPlants();
        showTimer();
        hibernate();
      
        // increases the age of all the plants after each step
        for(Iterator<Plant> it = plants.iterator(); it.hasNext(); ) {
            Plant plant = it.next(); 
            plant.incrementAge();
            if(!plant.isAlive()){
                it.remove();
            }
        }
        
        // changes the season every five steps
        if(step % 5 == 0) {
            view.updateSeason();
        }

        // Add the newly born animals to the main lists.
        view.showStatus(step, field);
    }
        
    /**
     * Reset the simulation to a starting position.
     */
    public void reset()
    {
        step = 0;
        animals.clear();
        populate();
        
        // Show the starting state in the view.
        view.showStatus(step, field);
    }
    
    /**
     * Randomly populate the field with liones and wildebeasts.
     */
    private void populate()
    {
        Random rand = Randomizer.getRandom();
        field.clear();       
        
        for(int row = 0; row < field.getDepth(); row++) {
            for(int col = 0; col < field.getWidth(); col++) {
                if(rand.nextDouble() <= lion_CREATION_PROBABILITY) {
                    Location location = new Location(row, col);
                    Lion lion = new Lion(true, field, location);
                    animals.add(lion);
                }
                else if(rand.nextDouble() <= wildebeast_CREATION_PROBABILITY) {
                    Location location = new Location(row, col);
                    Wildebeast wildebeast = new Wildebeast(true, field, location);
                    animals.add(wildebeast);
                }
                
                else if(rand.nextDouble() <= mouse_CREATION_PROBABILITY) {
                    Location location = new Location(row, col);
                    Mouse mouse = new Mouse(true, field, location);
                    animals.add(mouse);
                }
                else if(rand.nextDouble() <= berry_CREATION_PROBABILITY) {
                    Location location = new Location(row, col);
                    Berries berry = new Berries(field, location);
                    plants.add(berry);
                }
                else if(rand.nextDouble() <= weather.grassProbability()) {
                    Location location = new Location(row, col);
                    Grass grass = new Grass(field, location);
                    plants.add(grass);
                }
                else if (rand.nextDouble() <= owl_CREATION_PROBABILITY) {
                    Location location = new Location(row, col);
                    Owl owl = new Owl(true, field, location);
                    animals.add(owl);
                }
                else if(rand.nextDouble() <= hawk_CREATION_PROBABILITY) {
                    Location location = new Location(row, col);
                    Hawk hawk = new Hawk(true, field, location);
                    animals.add(hawk);
                }
                // else leave the location empty.
            }
        }
    }
    
    /**
     * Pause for a given time.
     * @param millisec  The time to pause for, in milliseconds
     */
    private void delay(int millisec)
    {
        try {
            Thread.sleep(millisec);
        }
        catch (InterruptedException ie) {
            // wake up
        }
    }
    
    /**
     * 
     * 
     */
    private void rollover()
    {
        for(time = 0; time <=6; time++){
            view.updateTimeLabel(time);
            try {
                Thread.sleep(20);
            }
            catch (InterruptedException ie) {
                // wake up
            }
        }
    } 
    
    
    /**
     * Changes the animals behaviour when they have a disease
     * 
     */
    private void recogniseDisease(Animal animal, Iterator it, String chosenDisease)
    {
        if(animal.returnDisease() == null){
            return;
        }
            
        else if(animal.returnDisease().equals("bacteria")){
            animal.setDead();
            it.remove();
        }
            
        else if(animal.returnDisease().equals("influenza")){
            animal.setDead();
            it.remove();
        }
            
        else if(animal.returnDisease().equals("covid")){
            animal.changeBreedingProbability(0.0);
        } 
    }
    
    private void passOnDisease(Animal animal, Iterator it, String chosenDisease) {
        List<Location> theAdjacentLocations = field.adjacentLocations(animal.getLocation());
        for(Location location: theAdjacentLocations){
            Object currentAnimal = field.getObjectAt(location);
            if(currentAnimal != null){
                Lifecycle animal1 = (Lifecycle) currentAnimal;
                animal1.giveTheDisease(chosenDisease);
            }
        
        }
    }
    
    private void showTimer()
    {
          if(is12hour){
            for(time = 6; time <= 18; time++){
                view.updateTimeLabel(time);
                try {
                    Thread.sleep(20);
                }
                catch (InterruptedException ie) {
                    // wake up
                }
            }
        }
        else {
            for(int time = 19; time <= 24; time++){
                view.updateTimeLabel(time);
                if (time == 24){
                    rollover();
                }
                try {
                    Thread.sleep(20);
                }
                catch (InterruptedException ie) {
                    // wake up
                }
            }
        }
    }
    
    private void spawnPlants()
    {
        grassProbability = weather.changeGrassProbability(currentSeason);
        berryProbability = weather.changeBerryProbability(currentSeason);
        Random rand = Randomizer.getRandom();
        //spawns berries and grass in different random places 
        for(int row = 0; row < field.getDepth(); row++) {
            for(int col = 0; col < field.getWidth(); col++) {
                if(rand.nextDouble() <= berryProbability) {
                    Location location = new Location(row, col);
                    if(field.getObjectAt(row, col) == null){
                        Berries berry = new Berries(field, location);
                        plants.add(berry);
                    }
                }
                
                else if(rand.nextDouble() <= grassProbability) {
                    Location location = new Location(row, col);
                    if(field.getObjectAt(row, col) == null){
                        Grass grass = new Grass(field, location);
                        plants.add(grass);
                    }
                }
            }
        }
    }
    
    private void hibernate()
    {
        List<Animal> newAnimals = new ArrayList<>();        
        // Let all wildebeasts act.
        for(Iterator<Animal> it = animals.iterator(); it.hasNext(); ) {
            Animal animal = it.next();   
            String chosenDisease = disease.chooseDisease();
            disease.diseaseProbabilities(animal, chosenDisease);
            weather.weatherBehaviour(currentWeather, animal, it);
            if((animal instanceof Owl) && (currentSeason.equals("Winter")))
            {
                animal.setIsSleeping();
            }
            
            else if((animal instanceof Hawk) && (currentSeason.equals("Autumn")))
            {
                animal.setIsSleeping();
            }
            
            else if((animal instanceof Wildebeast) && (currentSeason.equals("Summer")))
            {
                animal.setIsSleeping();
            }
            
            else{
                animal.changeSleeping();
            } 
            
            if(!animal.isSleeping()){
                animal.act(newAnimals, currentSeason);
                if(! animal.isAlive()) {
                    it.remove();
                    continue;
                }
            } 
            recogniseDisease(animal, it, chosenDisease);
            passOnDisease(animal, it, chosenDisease); 
        }
        animals.addAll(newAnimals);
    }
}
