import java.util.List;
import java.util.Iterator;
import java.util.Random;
/**
 * A simple model of a Mouse.
 * Mice age, move, eat Berries, and die.
 * 
 * @author (David J. Barnes, Michael KÃ¶lling, Simran Debnath, Susetta James)
 * @version 19/02/2022 (2)
 */
public class Mouse extends Animal
{
    // Characteristics shared by all Mice (class variables).
    
    // The age at which a Mouse can start to breed.
    private static final int BREEDING_AGE = 10;
    // The age to which a Mouse can live.
    private static final int MAX_AGE = 80;
    // The likelihood of a Mouse breeding.
    private static final double BREEDING_PROBABILITY = 0.8;
    // The maximum number of births.
    private static final int MAX_LITTER_SIZE = 30;
    // The food value of a single Berries. In effect, this is the
    // number of steps a Mouse can go before it has to eat again.
    private static int Berries_FOOD_VALUE = 25;
    // A shared random number generator to control breeding.
    private static final Random rand = Randomizer.getRandom();
    // The Mouse's age.
    private int age;
    // The Mouse's food level, which is increased by eating Berries.
    private int foodLevel;

    /**
     * Create a Mouse. A Mouse can be created as a new born (age zero
     * and not hungry) or with a random age and food level.
     * 
     * @param randomAge If true, the Mouse will have random age and hunger level.
     * @param field The field currently occupied.
     * @param location The location within the field.
     */
    public Mouse(boolean randomAge, Field field, Location location)
    {
        super(field, location);
        if(randomAge) {
            age = rand.nextInt(MAX_AGE);
            foodLevel = rand.nextInt(Berries_FOOD_VALUE);
        }
        else {
            age = 0;
            foodLevel = Berries_FOOD_VALUE;
        }
    }
    
    /**
     * This is what the Mouse does most of the time: it hunts for
     * Berries. In the process, it might breed, die of hunger,
     * or die of old age.
     * @param field The field currently occupied.
     * @param newMice A list to return newly born Mice.
     */
    public void act(List<Animal> newMice, String season)
    {
        incrementAge();
        incrementHunger();
        if(isAlive()) {
            giveBirth(newMice);            
            // Move towards a source of food if found.
            Location newLocation = findFood();
            if(!this.alive){
                return;
            }
            
            if(newLocation == null) { 
                // No food found - try to move to a free location.
                newLocation = getField().freeAdjacentLocation(getLocation());
            }
            // See if it was possible to move.
            if(newLocation != null) {
                setLocation(newLocation);
            }
            else {
                // Overcrowding.
                setDead();
            }
        }
    }

    /**
     * Look for Berries adjacent to the current location.
     * @return Where food was found, or null if it wasn't.
     */
    private Location findFood()
    {
        Field field = getField();
        List<Location> adjacent = field.adjacentLocations(getLocation());
        Iterator<Location> it = adjacent.iterator();
        while(it.hasNext()) {
            Location where = it.next();
            Object plant = field.getObjectAt(where);
            if(plant instanceof Berries) {
                Berries Berries = (Berries) plant;
                if(Berries.isPoisonous()){
                    Berries.setDead();
                    this.setDead();
                    return where;
                }
                else if(Berries.isAlive()) { 
                    Berries.setDead();
                    foodLevel = Berries_FOOD_VALUE;
                    return where;
                }
            }
        }
        return null;
    }
    
    /**
     * Check whether or not this Mouse is to give birth at this step.
     * New births will be made into free adjacent locations.
     * @param newMice A list to return newly born Mice.
     */
    private void giveBirth(List<Animal> newMice)
    {
        // New Mice are born into adjacent locations.
        // Get a list of adjacent free locations.
        Field field = getField();
        List<Location> free = field.getFreeAdjacentLocations(getLocation());
        if(getGender().equals("male")){
            int births = breed();
            for(int b = 0; b < births && free.size() > 0; b++) {
                Location loc = free.remove(0);
                Mouse young = new Mouse(false, field, loc);
                newMice.add(young);
            }
            
        }
    }
    
     /**
     * Generate a number representing the number of births,
     * if it can breed.
     * @return The number of births (may be zero).
     */
    private int breed()
    {
        int births = 0;
        if(canBreed() && rand.nextDouble() <= BREEDING_PROBABILITY) {
            births = rand.nextInt(MAX_LITTER_SIZE) + 1;
        }
        return births;
    }

    /**
     * A Mouse can breed if it has reached the breeding age.
     * @return true if the animal can breed.
     */
    protected boolean canBreed()
    {
        boolean isAnimal = false;
        List<Location> theAdjacentLocations = field.adjacentLocations(this.location);
        for(Location location: theAdjacentLocations){
            Object animal = field.getObjectAt(location);
            if(animal instanceof Mouse){
                Mouse mouse = (Mouse) animal;
                if(mouse.getGender().equals("female")){
                    isAnimal = true;
                }
            } 
        }
        return age >= BREEDING_AGE && isAnimal;
    } 
    
    /**
     * Changs food value for berries.
     * @param newValue Gives the new integer food value for berries food level.
     */
    public void changeFoodValue(int newValue)
    {
        Berries_FOOD_VALUE = newValue;
    }
}
