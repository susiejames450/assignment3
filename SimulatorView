import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import java.util.LinkedHashMap;
import java.util.Map;
/**
 * A graphical view of the simulation grid.
 * The view displays a colored rectangle for each location 
 * representing its contents. It uses a default background color.
 * Colors for each type of species can be defined using the
 * setColor method.
 * 
 * @author David J. Barnes and Michael KÃ¶lling
 * @version 2016.02.29
 */
public class SimulatorView extends JFrame
{
    // Colors used for empty locations.
    private static final Color EMPTY_COLOR = Color.white;

    // Color used for objects that have no defined color.
    private static final Color UNKNOWN_COLOR = Color.gray;

    private final String STEP_PREFIX = "Step: ";
    private final String POPULATION_PREFIX = "Population: ";
    private final String DATE_PREFIX = "Date:";
    private final String TIME_PREFIX = "Time:";
    private final String SEASON_PREFIX = "Season: ";
    private final String WEATHER_PREFIX = "Weather: ";
    private JLabel stepLabel, population, infoLabel, dateLabel, timeLabel, seasonLabel, weatherLabel;
    private JButton keyButton;
    private JPanel keyPanel;
    private JFrame keyFrame;
    private JTextField keyLabel;
    private FieldView fieldView;
    
    // A map for storing colors for participants in the simulation
    private Map<Class, Color> colors;
    // A statistics object computing and storing simulation information
    private FieldStats stats;
    // instance of the FieldStats class - this involves a hashMap which has counters for each entity in the simulation
    
    private Weather weather;
    /**
     * Create a view of the given width and height.
     * @param height The simulation's height.
     * @param width  The simulation's width.
     */
    public SimulatorView(int height, int width)
    {
        stats = new FieldStats();
        colors = new LinkedHashMap<>();
        weather = new Weather();

        setTitle("Fox and Rabbit Simulation");
        stepLabel = new JLabel(STEP_PREFIX, JLabel.CENTER);
        infoLabel = new JLabel("  ", JLabel.CENTER);
        population = new JLabel(POPULATION_PREFIX, JLabel.CENTER);  // thing to edit for the population. 
        seasonLabel = new JLabel("Season: ", JLabel.CENTER);
        dateLabel = new JLabel(DATE_PREFIX , JLabel.CENTER);
        timeLabel = new JLabel(TIME_PREFIX, JLabel.CENTER);
        seasonLabel = new JLabel(SEASON_PREFIX, JLabel.CENTER);
        weatherLabel = new JLabel(WEATHER_PREFIX, JLabel.CENTER);
        keyButton = new JButton("Key");
        
        setLocation(100, 50);
        
        fieldView = new FieldView(height, width);

        Container contents = getContentPane();
        
        JPanel infoPane = new JPanel(new BorderLayout());
        JPanel infoPane2 = new JPanel(new BorderLayout());
        infoPane.add(stepLabel, BorderLayout.WEST);
        infoPane.add(timeLabel, BorderLayout.EAST);
        infoPane.add(dateLabel, BorderLayout.CENTER);
        infoPane.add(seasonLabel, BorderLayout.NORTH);
        infoPane.add(weatherLabel, BorderLayout.SOUTH);
        
        contents.add(keyButton, BorderLayout.WEST);
        contents.add(infoPane, BorderLayout.NORTH);
        contents.add(fieldView, BorderLayout.CENTER);
        contents.add(population, BorderLayout.SOUTH);
        
        pack();
        setVisible(true);
        keyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {keyButtonClicked(); }
            });
    }
    
    /**
     * Define a color to be used for a given class of animal.
     * @param animalClass The animal's Class object.
     * @param color The color to be used for the given class.
     */
    public void setColor(Class animalClass, Color color)
    {
        colors.put(animalClass, color);
    }

    /**
     * Display a short information label at the top of the window.
     */
    public void setInfoText(String text)
    {
        infoLabel.setText(text);
    }

    /**
     * @return The color to be used for a given class of animal.
     */
    private Color getColor(Class animalClass)
    {
        Color col = colors.get(animalClass);
        if(col == null) {
            // no color defined for this class
            return UNKNOWN_COLOR;
        }
        else {
            return col;
        }
    }

    /**
     * Show the current status of the field.
     * @param step Which iteration step it is.
     * @param field The field whose status is to be displayed.
     */
    public void showStatus(int step, Field field)
    {
        if(!isVisible()) {
            setVisible(true);
        }
            
        stepLabel.setText(STEP_PREFIX + step);
        
        // add one here for time
        
        stats.reset();   // sets it all to 0 again
        
        fieldView.preparePaint();

        for(int row = 0; row < field.getDepth(); row++) {
            for(int col = 0; col < field.getWidth(); col++) {
                Object animal = field.getObjectAt(row, col);   // field class
                if(animal != null) {
                    stats.incrementCount(animal.getClass());      //  look at this -  parameter is the class of the animal that is in that square
                    // which is then passed to this method and the counter for that animal is increased by 1
                    fieldView.drawMark(col, row, getColor(animal.getClass()));
                }
                else {
                    fieldView.drawMark(col, row, EMPTY_COLOR);
                }
            }
        }
        stats.countFinished();  // just makes the valid true

        population.setText(POPULATION_PREFIX + " " + stats.getPopulationDetails(field));  
        
        dateLabel.setText(DATE_PREFIX + " " + stats.getTimeOfDay());
        seasonLabel.setText(SEASON_PREFIX + stats.getSeason());
        weatherLabel.setText(WEATHER_PREFIX + " " + weather.getWeatherType());
        fieldView.repaint();
    }

    /**
     * Determine whether the simulation should continue to run.
     * @return true If there is more than one species alive.
     */
    public boolean isViable(Field field)
    {
        return stats.isViable(field);
    }
    
    /**
    * Changes state from day to night and vice versa.
    */
    public void updateDayTime()
    {
        stats.reverseDay();
    }
        
    /**
     * Updates the time label seen in the simulator.
     * @param time The constantly changing time.
     */
    public void updateTimeLabel(Integer time)
    {
        timeLabel.setText(TIME_PREFIX + " " + time + ":00");
    }
    
    /**
     * Changes the season every 5 steps.
     */
    public void updateSeason()
    {
        stats.changeSeason();
    }
    
    /**
     * Returns the current season shown in simulator.
     * @return the name of the current season.
     */
    public String getTheSeason()
    {
        return stats.getSeason();
    }
    
    /**
     * Returns the current time in the day as shown in the simulator.
     * @return the current time.
     */
    public String getTimeOfDay()
    {
        return stats.getTimeOfDay();
    }
    
    /**
     * Gets the weather from the Weather class.
     * @return Returns the weather.
     */
    public String getWeather()
    {
        return weather.getWeather();
    }
    
    /**
     * 
     */
    public void keyButtonClicked()
    {
        System.out.println("Key button pressed");
        keyFrame = new JFrame("Key");
        keyPanel = new JPanel( new GridLayout(8, 1));
        
        keyFrame.setLocation(1200,500);
        keyFrame.setSize(500, 300);
        keyFrame.add(keyPanel);
        
        JLabel titleLabel = new JLabel("ANIMAL COLOUR KEY: ");
        Font font = new Font("Courier", Font.BOLD,12);
        titleLabel.setFont(font);
        
        keyPanel.add(titleLabel); 
        keyPanel.add(new JLabel("Grass = green"));
        keyPanel.add(new JLabel("Berries = pink"));
        keyPanel.add(new JLabel("Mice = grey"));
        keyPanel.add(new JLabel("Owls = blue"));
        keyPanel.add(new JLabel("Hawks = purple"));
        keyPanel.add(new JLabel("Wildebeasts = brown"));
        keyPanel.add(new JLabel("Lions = yellow"));
         
        keyFrame.setVisible(true); 
    }

    /**
     * Provide a graphical view of a rectangular field. This is 
     * a nested class (a class defined inside a class) which
     * defines a custom component for the user interface. This
     * component displays the field.
     * This is rather advanced GUI stuff - you can ignore this 
     * for your project if you like.
     */
    private class FieldView extends JPanel
    {
        private final int GRID_VIEW_SCALING_FACTOR = 6;

        private int gridWidth, gridHeight;
        private int xScale, yScale;
        Dimension size;
        private Graphics g;
        private Image fieldImage;

        /**
         * Create a new FieldView component.
         */
        public FieldView(int height, int width)
        {
            gridHeight = height;
            gridWidth = width;
            size = new Dimension(0, 0);
        }

        /**
         * Tell the GUI manager how big we would like to be.
         */
        public Dimension getPreferredSize()
        {
            return new Dimension(gridWidth * GRID_VIEW_SCALING_FACTOR,
                                 gridHeight * GRID_VIEW_SCALING_FACTOR);
        }

        /**
         * Prepare for a new round of painting. Since the component
         * may be resized, compute the scaling factor again.
         */
        public void preparePaint()
        {
            if(! size.equals(getSize())) {  // if the size has changed...
                size = getSize();
                fieldImage = fieldView.createImage(size.width, size.height);
                g = fieldImage.getGraphics();

                xScale = size.width / gridWidth;
                if(xScale < 1) {
                    xScale = GRID_VIEW_SCALING_FACTOR;
                }
                yScale = size.height / gridHeight;
                if(yScale < 1) {
                    yScale = GRID_VIEW_SCALING_FACTOR;
                }
            }
        }
        
        /**
         * Paint on grid location on this field in a given color.
         */
        public void drawMark(int x, int y, Color color)
        {
            g.setColor(color);
            g.fillRect(x * xScale, y * yScale, xScale-1, yScale-1);
        }

        /**
         * The field view component needs to be redisplayed. Copy the
         * internal image to screen.
         */
        public void paintComponent(Graphics g)
        {
            if(fieldImage != null) {
                Dimension currentSize = getSize();
                if(size.equals(currentSize)) {
                    g.drawImage(fieldImage, 0, 0, null);
                }
                else {
                    // Rescale the previous image.
                    g.drawImage(fieldImage, 0, 0, currentSize.width, currentSize.height, null);
                }
            }
        }

    }
    
      private class Key extends JPanel
    {
        private final int GRID_VIEW_SCALING_FACTOR = 6;

        private int gridWidth, gridHeight;
        private int xScale, yScale;
        Dimension size;
        private Graphics g;
        private Image fieldImage;

        /**
         * Create a new Key frame component.
         */
        public Key(int height, int width)
        {
            gridHeight = height;
            gridWidth = width;
            size = new Dimension(0, 0);
        }
    }
    
}
